#include <iostream>
#include <fstream>
#include <string>

#include <iostream>
#include <fstream>
#include <string>
#include <filesystem>

#include "ast/ast_node.hpp"
#include "ast/block_node.hpp"
#include "semantic/symbol.hpp"
#include "semantic/symbol_table.hpp"
#include "codegen/quadruples_generator.hpp"
#include "error/error_handler.hpp"

// Generated by Bison/Flex
#include "parser.tab.hpp"

extern int yyparse();
extern FILE* yyin;  // File pointer used by flex for input
extern int yylineno;
extern char* yytext; // Current token text from lexer
extern int yyleng;   // Length of current token

// Track column position
int current_column = 1;
int token_start_column = 1;

// Function called by flex for each token - keep track of column position
void update_column() {
    token_start_column = current_column;
    current_column += yyleng;
}

// Reset column counter for new lines
void reset_column() {
    current_column = 1;
    token_start_column = 1;
}

void yyerror(const char* s) {
    // Use our enhanced error handler
    ErrorHandler::getInstance()->reportSyntaxError(s, yylineno, token_start_column);
}

BlockNode* currBlock = new BlockNode(0, nullptr);  // Root block with ID 0


int main(int argc, char* argv[]) {
    QuadruplesGenerator generator("logs/quadrables.csv");

    SymbolTableGenerator::clearSymbolTable();
    
    const char* input_filename = "data/input.txt";  // Default filename
    
    // Use command-line argument if provided
    if (argc >= 2) {
        input_filename = argv[1];
    }

    // Open input file
    FILE* input_file = fopen(input_filename, "r");
    if (!input_file) {
        std::cerr << "Error opening input file: " << input_filename << std::endl;
        perror("Error details");
        return 1;
    }
    
    // Initialize error handler with source file
    ErrorHandler::getInstance()->loadSourceFile(input_filename);

    // Set flex to read from file
    yyin = input_file;
    yylineno = 1;  // Reset line counter
    reset_column(); // Reset column counter

    // Parse the input
    int parse_result = yyparse();

    // Clean up
    fclose(input_file);

    if (parse_result != 0) {
        std::cerr << "Parsing failed." << std::endl;
        return 1;
    }

    currBlock->generateCode(generator);

    if(ErrorHandler::getInstance()->hasErrors()) {
        std::cerr << "Errors found during parsing. Check error file for details." << std::endl;
        return 1;
    } else {
        std::cout << "Parsing completed successfully." << std::endl;
        generator.writeQuadruplesToFile();
        SymbolTableGenerator::writeToFile();
    }
    delete currBlock;

    return 0;
}